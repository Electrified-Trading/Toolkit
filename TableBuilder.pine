// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© Electrified (electrifiedtrading)

// @version=5
// @description Utility for creating tables.
library('TableBuilder', true) //v2
import Electrified/Color/2

export type TextStyle
    color color
    string size
    string family

export type LineStyle
    color color
    int width

export type TableStyle
    color bgColor
    string hAlign
    string vAlign
    TextStyle font
    LineStyle border
    LineStyle frame
   
export type Column
    TableStyle style
    int width
    
export type Cell
    string contents
    TableStyle style
    int width
    int height
    string tooltip

export type Row
    Cell[] cells
    TableStyle style
    int height

export type Table
    string position
    Column[] columns
    Row[] rows
    TableStyle style

//////////////////////////////////////////////////
// @function Creates a new table with an optional style.
// @param style The style to use for the table. Defaults to na.
// @returns The newly created table.
export create(string position, TableStyle style = na) =>
    Table.new(position, array.new<Column>(), array.new<Row>(), style)

equals(string a, string b) =>
    isAna = na(a)
    isBna = na(b)
    isAna ? isBna : (isBna ? false : a == b)

equals(float a, float b) =>
    isAna = na(a)
    isBna = na(b)
    isAna ? isBna : (isBna ? false : a == b)

equals(int a, int b) =>
    isAna = na(a)
    isBna = na(b)
    isAna ? isBna : (isBna ? false : a == b)    

//////////////////////////////////////////////////
// @function Determines if two TextStyles are equal.
// @param a The first TextStyle to compare.
// @param b The second TextStyle to compare.
// @returns True if the two TextStyles are equal, false otherwise.
export equals(TextStyle a, TextStyle b) =>
    isAna = na(a)
    isBna = na(b)
    isAna ? isBna : (isBna ? false :
      (Color.equals(a.color, b.color) ? (equals(a.size, b.size) ? equals(a.family, b.family) : false) : false))

//////////////////////////////////////////////////
// @function Determines if two LineStyles are equal.
// @param a The first LineStyle to compare.
// @param b The second LineStyle to compare.
// @returns True if the two LineStyles are equal, false otherwise.
export equals(LineStyle a, LineStyle b) =>
    isAna = na(a)
    isBna = na(b)
    isAna ? isBna : (isBna ? false :
      (Color.equals(a.color, b.color) ? equals(a.width, b.width) : false))

//////////////////////////////////////////////////
// @function Determines if two TableStyles are equal.
// @param a The first TableStyle to compare.
// @param b The second TableStyle to compare.
// @returns True if the two TableStyles are equal, false otherwise.
export equals(TableStyle a, TableStyle b) =>
    isAna = na(a)
    isBna = na(b)
    isAna ? isBna : (isBna ? false : (
      Color.equals(a.bgColor, b.bgColor) and
      equals(a.hAlign, b.hAlign) and
      equals(a.vAlign, b.vAlign) and
      equals(a.font, b.font) and
      equals(a.border, b.border) and
      equals(a.frame, b.frame)))

//////////////////////////////////////////////////
// @function Creates a TextStyle with the same property values as the child but inherits properties from the parent if the child property is na.
// @param child The child TextStyle to inherit to.
// @param parent The parent TextStyle to inherit from.
// @returns The inherited child TextStyle.
export inherit(TextStyle child, TextStyle parent) =>
    if na(child)
        parent
    else if na(parent)
        child
    else
        color = na(child.color) ? parent.color : child.color
        size = na(child.size) ? parent.size : child.size
        family = na(child.family) ? parent.family : child.family
        result = TextStyle.new(color, size, family)
        equals(child, result) ? child : result
        
//////////////////////////////////////////////////
// @function Creates a LineStyle with the same property values as the child but inherits properties from the parent if the child property is na.
// @param child The child LineStyle to inherit to.
// @param parent The parent LineStyle to inherit from.
// @returns The inherited child LineStyle.
export inherit(LineStyle child, LineStyle parent) =>
    if na(child)
        parent
    else if na(parent)
        child
    else
        color = na(child.color) ? parent.color : child.color
        width = na(child.width) ? parent.width : child.width
        result = LineStyle.new(color, width)
        equals(child, result) ? child : result

//////////////////////////////////////////////////
// @function Creates a TableStyle with the same property values as the child but inherits properties from the parent if the child property is na.
// @param child The child TableStyle to inherit to.
// @param parent The parent TableStyle to inherit from.
// @returns The inherited child TableStyle.
export inherit(TableStyle child, TableStyle parent) =>
    if na(child)
        parent
    else if na(parent)
        child
    else
        bgColor = na(child.bgColor) ? parent.bgColor : child.bgColor
        hAlign = na(child.hAlign) ? parent.hAlign : child.hAlign
        vAlign = na(child.vAlign) ? parent.vAlign : child.vAlign
        font = inherit(child.font, parent.font)
        border = inherit(child.border, parent.border)
        frame = inherit(child.frame, parent.frame)
        result = TableStyle.new(bgColor, hAlign, vAlign, font, border, frame)
        equals(child, result) ? child : result

//////////////////////////////////////////////////
// @function Creates a TextStyle that only uses property values from the child that differ from the parent.
// @param child The child TextStyle to check for differences.
// @param parent The parent TextStyle to compare against.
// @returns The child TextStyle with only the differing property values, or na if no differences were found.
export getStyleChange(TextStyle child, TextStyle parent) =>
    var TextStyle sna = na
    if na(child)
        sna
    else if na(parent)
        child
    else
        color = child.color == parent.color ? na : child.color
        size = child.size == parent.size ? na : child.size
        family = child.family == parent.family ? na : child.family
        TextStyle.new(color, size, family)

//////////////////////////////////////////////////
// @function Creates a LineStyle that only uses property values from the child that differ from the parent.
// @param child The child LineStyle to check for differences.
// @param parent The parent LineStyle to compare against.
// @returns The child LineStyle with only the differing property values, or na if no differences were found.
export getStyleChange(LineStyle child, LineStyle parent) =>
    var LineStyle sna = na
    if na(child)
        sna
    else if na(parent)
        child
    else
        color = child.color == parent.color ? na : child.color
        width = child.width == parent.width ? na : child.width
        LineStyle.new(color, width)

//////////////////////////////////////////////////
// @function Creates a TableStyle that only uses property values from the child that differ from the parent.
// @param child The child TableStyle to check for differences.
// @param parent The parent TableStyle to compare against.
// @returns The child TableStyle with only the differing property values, or na if no differences were found.
export getStyleChange(TableStyle child, TableStyle parent) =>
    var TableStyle sna = na
    if na(child)
        sna
    else if na(parent)
        child
    else
        bgColor = child.bgColor == parent.bgColor ? na : child.bgColor
        hAlign = child.hAlign == parent.hAlign ? na : child.hAlign
        vAlign = child.vAlign == parent.vAlign ? na : child.vAlign
        font = getStyleChange(child.font, parent.font)
        border = getStyleChange(child.border, parent.border)
        frame = getStyleChange(child.frame, parent.frame)
        TableStyle.new(bgColor, hAlign, vAlign, font, border, frame)

//////////////////////////////////////////////////
// @function Adds a column to a table.
// @param table The table to add the column to.
// @param column The column to add to the table.
export addColumn(Table table, Column column) =>
    array.push(table.columns, column)

//////////////////////////////////////////////////
// @function Adds a new column to the given table with the given width and optional style.
// @param table The table to add the column to.
// @param width The width of the new column.
// @param style The optional style for the new column.
// @returns The added column.
export addColumn(Table table, int width, TableStyle style = na) =>
    column = Column.new(style, width)
    array.push(table.columns, column)
    column

//////////////////////////////////////////////////
// @function Adds a new column to the given table with optional style.
// @param table The table to add the column to.
// @param style The optional style for the new column.
// @returns The added column.
export addColumn(Table table, TableStyle style = na) =>
    column = Column.new(style)
    array.push(table.columns, column)
    column

//////////////////////////////////////////////////
// @function Adds a row to a table.
// @param table The table to add the row to.
// @param row The row to add to the table.
export addRow(Table table, Row row) =>
    array.push(table.rows, row)

//////////////////////////////////////////////////
// @function Creates a row with a given set of cells and adds it to a table.
// @param table The table to add the row to.
// @param cells The cells to include in the row.
// @returns The created row.
export addRow(Table table, Cell[] cells) =>
    row = Row.new(cells)
    array.push(table.rows, row)
    row

//////////////////////////////////////////////////
// @function Creates a row and adds it to a table.
// @param table The table to add the row to.
// @returns The created row.
export addRow(Table table) =>
	addRow(table, array.new<Cell>())

//////////////////////////////////////////////////
// @function Adds a cell to a row.
// @param row The row to add the cell to.
// @param cell The cell to add to the row.
export addCell(Row row, Cell cell) =>
    array.push(row.cells, cell)

//////////////////////////////////////////////////
// @function Creates a cell and adds it to a row.
// @param row The row to add the cell to.
// @param contents The contents of the cell.
// @param style The style of the cell.
// @param width The width of the cell.
// @param height The height of the cell.
// @param tooltip The tooltip of the cell.
// @returns The created cell.
export addCell(Row row, string contents = na, TableStyle style = na, int width = na, int height = na, string tooltip = na) =>
    cell = Cell.new(contents, style, width, height, tooltip)
    array.push(row.cells, cell)
    cell

getFgColor(color fgColor, color bgColor) =>
    na(fgColor) ? Color.getContrastColor(bgColor) : fgColor

//////////////////////////////////////////////////
// @function Builds a table in PineScript based on a given Table object.  Any values that are 'na' will simply not be set.
// @param table The Table object to use as data for building the table.
// @returns The created table in PineScript.
export build(Table tbl) =>
    // Get the number of rows in the table
    numRows = array.size(tbl.rows)

    // Get the number of columns in the table by getting the maximum number of cells in any row
    colCount = na(tbl.columns) ? 0 : array.size(tbl.columns)
    numColumns = 0
    for row in tbl.rows
        numColumns := math.max(numColumns, array.size(row.cells))

    // Create the table in PineScript
    color tblBgColor = na
    pineTable = if na(tbl.style)
        table.new(tbl.position, math.max(numColumns, colCount), numRows)
    else
        tblBgColor := tbl.style.bgColor
        table.new(tbl.position, math.max(numColumns, colCount), numRows, tblBgColor,
          na(tbl.style.frame) ? na : tbl.style.frame.color,
          na(tbl.style.frame) ? na : tbl.style.frame.width,
          na(tbl.style.border) ? na : tbl.style.border.color,
          na(tbl.style.border) ? na : tbl.style.border.width)

    // Iterate through the rows and cells and set their styles
    for r = 0 to numRows - 1
        row = array.get(tbl.rows, r)
        cellCount = array.size(row.cells)
        for c = 0 to cellCount - 1
            cell = array.get(row.cells, c)
            if not na(cell)

                // The order of inheritance is table > column > row > cell
                column = c < colCount ? array.get(tbl.columns, c) : na

                cellStyle = inherit(cell.style, row.style)
                if not na(column)
                    cellStyle := inherit(cellStyle, column.style)
                cellStyle := inherit(cellStyle, tbl.style)

                // We have to capture the color here because every cell must have its font color set.
                color bgColor = na
                color fgColor = na

                if not na(cellStyle)
                    if not na(cellStyle.bgColor)
                        bgColor := cellStyle.bgColor
                        if not Color.equals(bgColor, tblBgColor)
                            table.cell_set_bgcolor(pineTable, c, r, bgColor)
                    if not na(cellStyle.font)
                        if not na(cellStyle.font.color)
                            fgColor := cellStyle.font.color
                        if not na(cellStyle.font.size)
                            table.cell_set_text_size(pineTable, c, r, cellStyle.font.size)
                    if not na(cellStyle.hAlign)
                        table.cell_set_text_halign(pineTable, c, r, cellStyle.hAlign)
                    if not na(cellStyle.vAlign)
                        table.cell_set_text_valign(pineTable, c, r, cellStyle.vAlign)

                if not na(cell.width)
                    table.cell_set_width(pineTable, c, r, cell.width)
                if not na(cell.height)
                    table.cell_set_height(pineTable, c, r, cell.height)
                if not na(cell.tooltip)
                    table.cell_set_tooltip(pineTable, c, r, cell.tooltip)
                if not na(cell.contents)
                    table.cell_set_text(pineTable, c, r, cell.contents)

                table.cell_set_text_color(pineTable, c, r, getFgColor(fgColor, bgColor))

	pineTable

//////////////////////////////////////////////////
//// Demo ////////////////////////////////////////
//////////////////////////////////////////////////

// Setup the table
tbl = create(position.top_right, TableStyle.new(na, text.align_right))
tbl.style.frame := LineStyle.new(color.white, 1)

// Add an unstyled column.
addColumn(tbl)
// Set the second column style so it can be inherited.
addColumn(tbl, TableStyle.new(color.blue))

// Setup the header row.
header = addRow(tbl)
header.style := TableStyle.new(color.white)
addCell(header, "Index")
addCell(header, "Value")

// Add the rows and cells.
for i = 1 to 10
	row = addRow(tbl)
	addCell(row, str.tostring(i))
	addCell(row, str.tostring(i*2000))

// Build the table.
build(tbl)

